/*
 * -------------------------------------------------
 *  nf-core/sarek Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performance compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

params {
  // Defaults only, expecting to be overwritten
  annotateTools = null // Only with --step annotate
  annotateVCF = null // Deprecated params
  annotation_cache = null // Annotation cache disabled
  cadd_InDels = false // No CADD files
  cadd_InDels_tbi = false // No CADD files
  cadd_WG_SNVs = false // No CADD files
  cadd_WG_SNVs_tbi = false // No CADD files
  cadd_cache = null // CADD cache disabled
  cpus = 8 // Base specifications
  email = null // No default email
  genesplicer = null // genesplicer disabled
  genomeDict = null // Deprecated params
  genomeFile = null // Deprecated params
  genomeIndex = null // Deprecated params
  hostnames = null // No default hostnames
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  input = null // No default input
  markdup_java_options = '"-Xms4000m -Xmx7g"' //Established values for markDuplicate memory consumption, see issue PR #689 for details
  maxMultiqcEmailFileSize = null // No default max MultiQC email size
  max_cpus = 16 // Base specifications
  max_memory = 128.GB // Base specifications
  max_time = 240.h // Base specifications
  monochrome_logs = null // Monochrome logs disabled
  multiqc_config = "assets/multiqc_config" // Default multiqc config
  name = null // No default name
  noGVCF = null // g.vcf are produced by HaplotypeCaller
  noReports = null // Deprecated params
  noStrelkaBP = null // Strelka will use Manta candidateSmallIndels if available
  nucleotidesPerSecond = 1000.0 // Default interval size
  outdir = 'results' // Default output dir is `results`
  plaintext_email = null // Plaintext email disabled
  pon = false // No default PON file for GATK Mutect2 Panel of Normal
  publishDirMode = 'copy' // Default PublishDirMode (same as Nextflow)
  sample = null // Deprecated params
  sampleDir = null // Deprecated params
  saveGenomeIndex = null // Built Indexes not saved
  sequencing_center = null // No sequencing center to be writen in BAM header in MapReads process
  singleCPUMem = 7.GB // for processes that are using more memory but a single CPU only. Use the 'core' queue for these
  skipQC = null // All QC tools are used
  snpEff_cache = null // No directory for snpEff cache
  step = 'mapping' // Starts with mapping
  targetBED = false // No default TargetBED file for targeted sequencing
  tools = null // No default Variant Calling or Annotation tools
  vep_cache = null // No directory for VEP cache
}

process {
  cpus = {check_resource(params.cpus * task.attempt)}
  memory = {check_resource((params.singleCPUMem as nextflow.util.MemoryUnit) * task.attempt)}
  time = {check_resource(24.h * task.attempt)}
  shell = ['/bin/bash', '-euo', 'pipefail']

  errorStrategy = {task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish'}
  maxErrors = '-1'
  maxRetries = 3

  withLabel:cpus_1 {
    cpus = {check_resource(1)}
  }
  withLabel:cpus_2 {
    cpus = {check_resource(2)}
  }
  withLabel:cpus_4 {
    cpus = {check_resource(4)}
  }
  withLabel:cpus_8 {
    cpus = {check_resource(8)}
  }
  withLabel:cpus_16 {
    cpus = {check_resource(16)}
  }
  withLabel:cpus_max {
    cpus = {check_resource(params.max_cpus)}
  }

  withLabel:memory_singleCPU_2_task {
    memory = {check_resource((params.singleCPUMem as nextflow.util.MemoryUnit) * 2 * task.attempt)}
  }
  withLabel:memory_singleCPU_task_sq {
    memory = {check_resource((params.singleCPUMem as nextflow.util.MemoryUnit) * task.attempt * task.attempt)}
  }

  withLabel:memory_max {
    memory = {check_resource(params.max_memory)}
  }

  withName:ConcatVCF {
    // For unknown reasons, ConcatVCF sometimes fails with SIGPIPE
    // (exit code 141). Rerunning the process will usually work.
    errorStrategy = {task.exitStatus == 141 ? 'retry' : 'terminate'}
  }
  withName:FastQCBAM {
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  withName:FastQCFQ {
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  withName:MapReads {
    memory = {check_resource(60.GB * task.attempt)}
  }
  withName:MultiQC {
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  withName:Snpeff {
    container = {(params.annotation_cache && params.snpEff_cache) ? 'nfcore/sarek:dev' : "nfcore/sareksnpeff:dev.${params.genome}"}
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  withLabel:VEP {
    container = {(params.annotation_cache && params.vep_cache) ? 'nfcore/sarek:dev' : "nfcore/sarekvep:dev.${params.genome}"}
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
}
