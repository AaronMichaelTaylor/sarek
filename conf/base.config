/*
 * -------------------------------------------------
 *  nf-core/sarek Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxErrors = '-1'
  maxRetries = 1

  //We'll have low, medium, high labels
  /*
 * -------------------------------------------------
 * Nextflow config file for Sarek
 * -------------------------------------------------
 * Generalized resource configuration for clusters
 * -------------------------------------------------
 */

params {
  singleCPUMem  = 7.GB // for processes that are using more memory but a single CPU only. Use the 'core' queue for these
}

process {
  cpus = { check_max( 10, 'cpus' ) }
  memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  time = { check_max( 8.h * task.attempt, 'time' ) }

  errorStrategy = {task.exitStatus == 143 ? 'retry' : 'terminate'}
  maxErrors = '-1'
  maxRetries = 3

  withName:MapReads {
    memory = { check_max( 60.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 16, 'cpus' ) }
  }
  withName:CreateRecalibrationTable {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 60.GB * task.attempt, 'memory') }
  }
  withName:MarkDuplicates {
	// Actually the -Xmx value should be kept lower,
    // and is set through the markdup_java_options
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withName:MergeBams {
    cpus = { check_max( 4, 'cpus') }
    memory = {params.singleCPUMem * task.attempt}
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RecalibrateBam {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 7.GB * 2 * task.attempt, 'memory' ) }
    time = { check_max( 10.h * task.attempt, 'time' ) }
  }
  withName:RunAlleleCount {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
  }
  withName:RunAscat {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
  }
  withName:RunBamQCmapped {
    cpus = { check_max( 6, 'cpus' ) }
    memory = { check_max( 70.GB, 'memory' ) }
  }
  withName:RunBamQCrecalibrated {
    cpus = { check_max( 6, 'cpus' ) }
    memory = { check_max( 70.GB, 'memory' ) }
  }
  withName:RunBcftoolsStats {
    cpus = { check_max( 1, 'cpus' ) }
  }
  withName:RunConvertAlleleCounts {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
  }
  withName:RunFastQC {
    cpus = { check_max( 2, 'cpus' ) } // FastQC is only capable of running one thread per fastq file.
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunFreeBayes {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withName:RunHaplotypecaller {
    cpus = { check_max( 1, 'cpus' ) }
    // Increase memory quadratically
    memory = { check_max( 7.GB * 2 * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RunGenotypeGVCFs {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  }
  withName:RunMultiQC {
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunMutect2 {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 7.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RunSamtoolsStats {
    cpus = { check_max( 2, 'cpus' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RunSingleManta {
    cpus = { check_max( 20, 'cpus' ) }
    memory = { check_max( 16.GB, 'memory') }
  }
  withName:RunSingleStrelka {
    cpus = { check_max( 20, 'cpus' ) }
    memory = { check_max( 16.GB, 'memory') }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RunSnpeff {
    cpus = { check_max( 1, 'cpus' ) }
  }
  withName:RunStrelka {
    cpus = { check_max( 1, 'cpus' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RunVEP {
    cpus = { check_max( 4, 'cpus' ) }
    memory = {check_max (32.GB * task.attempt, 'memory' ) }
  }
}

params {
  // Defaults only, expecting to be overwritten
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  markdup_java_options = '"-Xms4000m -Xmx7g"' //Established values for markDuplicate memory consumption, see issue PR #689 for details
  max_cpus = 16
  max_memory = 128.GB
  max_time = 240.h
}
